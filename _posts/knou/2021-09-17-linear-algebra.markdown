---
title:  "[방통대] 선형대수 정리"
created:   2021-09-17 21:23:12 +0900
updated:   2021-09-17 21:23:12 +0900
author: namu
categories: knou
permalink: "/knou/:year/:month/:day/:title"
image: https://cdn.inflearn.com/wp-content/uploads/linear2_5.jpg
alt: linear algebra image
image-view: true
image-author: "[Inflearn 강의] 파이썬을 활용한 선형대수학 - NumPy와 SciPy의 활용"
image-source: https://www.inflearn.com/course/%EC%84%A0%ED%98%95%EB%8C%80%EC%88%98%ED%95%99
---


---

### 목차

1. [일차연립방정식](#일차연립방정식)
2. [행렬과 가우스 소거법](#행렬과-가우스-소거법)
3. [행렬연산](#행렬연산)
4. [역행렬](#역행렬)
5. [행렬식](#행렬식)
6. [크래머 공식과 역행렬](#크래머-공식과-역행렬)
7. [평면벡터와 공간벡터](#평면벡터와-공간벡터)
8. [벡터공간](#벡터공간)
9. [기저와 차원](#기저와-차원)
10. [선형변환](#선형변환)
11. [](#)
12. [](#)
13. [](#)
14. [](#)
15. [](#)

### 참조

- 손진곤, 방송통신대학교 선형대수 강의, 2021

---

<br>
## 들어가며

본 정리는 2021학년도 방송통신대 손진곤 교수님의 선형대수 강의를 들으며 요약한 것입니다.

손진곤 교수님은 내 생각(논리)을 표현할 시 고도의 **```추상화Abstraction```** 능력에 대해서 강조하십니다.

선형대수의 효과적인 학습 방법은, **새로운 언어(기호)를 배운다**는 관점으로 접근하는 것입니다.
기호로써 수학은 수학적 개념들을 고도로 추상화된 언어를 활용해 논리적으로 기술하는 것이므로, 만국공통어라고 할 수 있습니다.
타인의 생각이 녹아 있는 기호논리를 얼마나 이해하고, 내 생각을 그것으로 얼마나 표현할 수 있는가가 관건입니다.

이미지로 Inflearn 강의인
<a href="https://www.inflearn.com/course/%EC%84%A0%ED%98%95%EB%8C%80%EC%88%98%ED%95%99" target="_blank">파이썬을 활용한 선형대수학 - NumPy와 SciPy의 활용</a>
의 타이틀을 가져온 이유는,
이렇게 이론적인 수업을 모두 마친 이후에 파이썬의 여러 모듈들을 이용해 실질적인 활용을 해보기 위함입니다.

나중에 선형적 데이터에 대한 인공지능 기계학습을 공부할 때 좋은 베이스가 되기를 바랍니다.
아직은 이 분야에 아는 것이 없습니다.(2021.09.17)

강의는 크게 세 가지 부분으로 나눠집니다.

- 제1부: 행렬
- 제2부: 벡터공간과 선형변환
- 제3분: 고유값 문제와 벡터의 직교성(최소자승법)

<br>
## 1. 일차연립방정식

#### 1.1 들어가기

- **맛보기 문제1**: 비행기 속도
    - 비행기가 x 속도로 두 지점을 왕복할 때 걸리는 시간이 다른 경우, 영향을 미치는 바람의 속도 y 구하기

바람의 속도 y 는 한 방향으로만 작용하게 됩니다. 따라서,

```text
6.25(x - y) = 5000
   5(x + y) = 5000
```

위 연립일차방정식을 통해 ```x = 900(km/h)```, ```y = 100(km/h)``` 임을 구할 수 있습니다.

- **맛보기 문제2**: regression (회귀)
    - 여러 점들을 대표할 수 있는 일차 곡선을 구하기
    - 평면에서 세 점 (1, 4), (2, 0), (3, 12) 을 지나는 2차 곡선 구하기
    - 머신러닝에서 선형대수로써 쓰입니다.

여기서 2차 곡선의 다항식은 ```p(x) = a0 + a1x + a2x^2``` 와 같이 씁니다.
주어진 세 점에 대한 정보를 활용해 2차 곡선의 각 항의 계수와 상수를 구해냅니다.

풀이로는 방정식 p 에 x 값을 넣어 y 값이 나오는지 확인하게 됩니다.

```text
a0 + a1 + a2 = 4
a0 + 2a1 + 4a2 = 0
a0 + 6a1 + 9a2 = 12
```

연립방정식을 푼 결과 2차 곡선은 ```p(x) = 24 - 28x + 8x^2``` 입니다~

#### 오늘의 학습 목표!

- 다음을 설명할 수 있다.

> - 일차방정식 ax = b 의 해법
> - n 원 일차연립방정식
> - 일차연립방정식의 계수, 상수, 미지수, 해
> - 소거법
> - 방정식에 관한 3가지 기본 연산
> - 일차연립방정식 해의 기하학적 의미
> - 일차연입방정식의 응용 사례

---

#### 1.2 본 강의

#### (1) 일차연립방정식

가장 기본적인 **일차방정식**은 다음의 형태를 띕니다.

> ax = b

- a: 계수(coefficient)
- x: 미지수(unknown)
- b: 상수(constant)

여기서 해를 구하기 위해 ```x = b/a``` 혹은 ```x = a^-1b``` 라고 할 수 있을까요?
(```a^-1``` 은 ```a``` 의 곱셈에 관한 역원, 곱해서 항등원 1이 되는 기호)

```a = 0``` 혹은 ```b = 0``` 인 경우 의도된 해를 구할 수 없는 문제가 발생합니다.

이런 특별한 상황을 예외라고 하는데, 고급 프로그래머일수록 이 예외에 대한 대처 경험이 많습니다.
충분히 많은 경우의 수를 따져볼 수 있는 것이죠.

위에서의 해 표현 방식은 보통의 경우 맞으나, 계수가 0인 예외 경우를 추가적으로 고려해야 합니다.

- **a != 0** 인 경우
    - a 값에 따라 유일한 해를 가짐
- **a = 0, b = 0** 인 경우
    - 부정, 즉 무수히 많은 해를 가짐
    - a = 0 이므로 x 에 어떤 수가 와도 b = 0 와 같아지기 때문
- **a = 0, b != 0** 인 경우
    - 불능, 즉 해가 없는 경우
    - 0 에 어떤 수를 곱해도 0 이 되므로, 우변인 b 의 값과 같을 수 없음

이제 **연립일차방정식**을 살펴봅시다.

> **n원 일차연립방정식**
>> 미지수가 n 개인 일차방정식들을 유한개(m 개) 묶어 놓은 것

따라서 이런 모양으로 표현합니다.

```text
a11X1 + a12X2 + ... + a1nXn = b1
a21X1 + a22X2 + ... + a2nXn = b1

...

am1X1 + am2X2 + ... + amnXn = bm
```

n 원 일차연립방정식의 해는, 모든 차수의 X 를 S 로 치환해 만족하는 모든 n 개의 S 값의 모음입니다.

```text
a11S1 + a12S2 + ... + a1nSn = b1
a21S1 + a22S2 + ... + a2nSn = b1

...

am1S1 + am2S2 + ... + amnSn = bm
```

- 해: 순서조 (S1, S2, ..., Sn) 를 해[근]라고 함

앞서 들어가기에서 살펴본 **3원 일차연립방정식** ```p(x) = 24 - 28x + 8x^2``` 를 살펴보면,
3개의 연립식을 통해 미지수 3개를 찾아냅니다.

#### (2) 소거법

**소거법**은 다음의 3가지 연산을 이용하여 주어진 연립방정식을 **동일한 해집합**을 가지면서
보다 풀기 쉬운 형태의 연립방정식으로 변환해가는 방법입니다.

#### 방정식에 관한 3가지 기본 연산

1. 두 방정식을 교환한다
2. 한 방정식에 0이 아닌 상수를 곱한다
3. 한 방정식에 임의의 상수를 곱하여 다른 방정식에 더한다

3번에서 임의의 상수가 0이 되어도 **동일한 해집합**의 조건을 만족하기 때문에 0도 가능하다는 점에 주목해야 합니다.

이제 다음의 문제를 풀어봅시다.

- 다음을 소거법으로 풀어라.
    - **2x - y = -1**
    - **x + y = 4**

사실 이 문제는 간단해서 1, 2번의 과정 없이 바로 3. 소거하면 됩니다.

- **2x - y = -1**
- **x + y = 4**
- **3x = 3**

따라서 ```x = 1```, ```y = 3``` 으로, **(1, 3)** 의 해가 도출됩니다.

#### (3) 

---

#### 1.3 정리하기

---

#### 1.4 상세한 강의(2015)

<br>
## 2. 행렬과 가우스 소거법

#### 2.1 들어가기

---

#### 2.2 본 강의

#### (1) 

#### (2) 

#### (3) 

---

#### 2.3 정리하기

---

#### 2.4 상세한 강의(2015)
