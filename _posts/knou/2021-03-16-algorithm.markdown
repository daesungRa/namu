---
title:  "[방통대] 알고리즘 수업 정리"
created:   2021-03-16 22:48:07 +0900
updated:   2021-03-17 15:29:33 +0900
author: namu
categories: knou
permalink: "/knou/:year/:month/:day/:title"
image: https://images.unsplash.com/photo-1509475826633-fed577a2c71b?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1651&q=80
alt: algorithm image
image-view: true
image-author: Sigmund
image-source: https://unsplash.com/photos/HsTnjCVQ798
---


---

### 목차

1. [알고리즘 학습에 앞서서](#1-알고리즘-학습에-앞서서)
2. [알고리즘의 기초](#2-알고리즘의-기초)
3. [분할정복 알고리즘 1](#3-분할정복-알고리즘-1)
4. [분할정복 알고리즘 2](#4-분할정복-알고리즘-2)
5. [](#)
6. [](#)
7. [](#)
8. [](#)
9. [](#)
10. [](#)
11. [](#)
12. [](#)
13. [](#)
14. [](#)
15. [](#)

---

<br>
## 들어가며

다음은 2021학년도 1학기 알고리즘 수업에 대한 정리입니다.

<br>
## 1. 알고리즘 학습에 앞서서

### 컴퓨터 과학에서 알고리즘의 위치

- 컴퓨터 과학 = 컴퓨터 + 데이터 + 프로그램 + 알고리즘

여기서 알고리즘을 기반으로 주어진 정보를 처리하는 프로그램을 작성합니다.<br>
컴퓨터 과학은 **알고리즘의 과학**이라고 할 수 있습니다. -> "알고리즘과 관련된 이슈를 다루는 학문" (한계, 분석, 개발, 실행, 통신, 표현)

### 알고리즘은 왜 필요한가?

### 알고리즘의 학습을 위해 필요한 것

- 자료구조
- 프로그램 능력
- 수학적 지식(기반)

본 수업에서는 알고리즘에 활용되는 자료구조 이해와 기본적인 프로그램 능력, 수학적 지식이 필요합니다.
프로그램 능력이라 함은 최소한 코드를 보고 흐름을 이해할 수 있어야 함을 의미하며,
수학적 지식은 논리적인(수학적) 사고가 가능한지가 중요합니다.
자료구조는 복습을 통해 우선적으로 학습하게 됩니다.

<br>
## 2. 알고리즘의 기초

본 강에서는 알고리즘의 개념, 설계, 분석을 공부하고, 성능을 어떻게 평가할 것인지에 대해 살펴봅니다.

### 학습목표

- 알고리즘의 정의 및 조건 이해
- 알고리즘 설계의 다양성 및 대표적인 설계 기법의 종류를 이해하고 설명할 수 있다
- 알고리즘의 시간 복잡도의 개념을 이해하고 적용할 수 있다
- 점근성능의 표기법의 종류를 이해하고 적용할 수 있다
- 기본적인 점화식의 종류와 개념을 이해하여 설명할 수 있다

### 알고리즘의 개념

알고리즘은 주어진 문제를 풀기 위한 명령어들의 단계적 나열을 의미합니다.
단, **```입출력```**0개 이상의 input과 1개 이상의 output이 있어야 하며,
**```명확성```**각 명령은 모호하지 않고 단순 명확하야 하고,
**```유한성```**한정된 수의 단계를 거친 후에는 반드시 종료되어야 하며,
**```유효성```**모든 명령은 컴퓨터에서 수행 가능해야 합니다.

위 네 가지 조건이 만족되는 알고리즘이어야만 컴퓨터로 해결할 수 있습니다.

여기서 실용적인 관점 하나를 추가하자면, 알고리즘은 **```효율적```**이어야만 합니다.
해결하는데 너무 많은 시간이 소요된다면 그것은 문제해결을 위해 적절한 알고리즘이라고 할 수 없습니다.

### 알고리즘의 생성 단계

설계 -> 표현/기술 -> 정확성 검증 -> 효율성 분석

...

### 시간 복잡도

시간 복잡도는 주어진 알고리즘의 연산 횟수를 함수화하여 그 중 최고차항에 대한 Big-oh(빅-오) 표기법으로 나타냅니다.

### 점근성능, 표기법

성능을 측정할 때는 입력 크기 n이 **무한대로 커짐**을 가정합니다.
이에 따라 상수 및 최고차항보다 작은 차수의 항들은 사실상 의미가 없어집니다.
알고리즘의 다항식 함수에서 최고차항만을 취해서 표현하는 것을 **점근성능**이라고 합니다.

점근성능은 정확한 값이 아닌 어림값입니다. 하지만 입력 크기에 따른 증가추세를 파악하여 알고리즘 간 우열을 표현하는 데는 아주 용이합니다.

- [정의] Big-oh 점근적 상한
> 어떤 양의 상수 c와 n0이 존재하여 모든 n>=n0에 대하여 f(n)<=c*g(n)이면 f(n)=O(g(n))이다.

Big-oh 점근적 상한 정의가 의미하는 바는 **내가 정의한 알고리즘 함수 f(n)의 수행시간의 상한식 g(n)**입니다.
즉 아무리 성능이 나빠져도(수행시간이 늘어나도↑) 상한함수보다는 나빠지지(수행시간이 늘어나지↑) 않음을 의미합니다.
내 알고리즘의 최악의 수행사례를 가정하여 시간 복잡도를 표현하는 것입니다.
이를 O(g(n))으로 표기합니다.

- [정의] Big-omega 점근적 하한
> 어떤 양의 상수 c와 n0이 존재하여 모든 n>=n0에 대하여 f(n)>=c*g(n)이면 f(n)=Ω(g(n))이다.

Big-omega 점근적 하한은 Big-oh와는 반대로 **하한식 g(n)**을 표현합니다.
이는 내 알고리즘의 성능이 아무리 좋아져도(수행시간이 줄어들어도↓) 하한함수보다는 좋아지지(수행시간이 줄어들지↓) 않음을 의미합니다.

- [정의] Big-theta 점근적 상하한
> 어떤 양의 상수 c1, c2와 n0이 존재하여 모든 n>=n0에 대하여 c1*g(n)<=f(n)<=c2*g(n)이면 f(n)=θ(g(n))이다.

추가적으로 Big-theta 점근적 하한은 **상한식과 하한식을 전부 포함하는 g(n)**을 표현합니다.

일반적으로 시간 복잡도를 표현할 때는 Big-oh 점근적 상한식을 활용하므로, **O(상수를 제거한 상한식의 최고차항)**으로 나타냅니다.

ex) ```f(n) = 3n² + 5``` => O(n²)

### 주요 O-표기 간의 연산 시간의 크기 관계

O(n), O(n^2), O(n^3)중 어느 것이 가장 효율적인(연산횟수 ↓) 알고리즘일까요?
단순히 n에 수를 늘려가며 대입하여 비교해봐도 O(n)의 연산 횟수 증가정도가 가장 작습니다.

주요 알고리즘 함수식 비교
- O(1) < O(logn) < O(n) < O(nlogn) < O(n²) < O(2ⁿ) < O(n!)

오른쪽으로 갈수록 연산 횟수 정도가 더 큰 비효율적(연산횟수, 수행시간 ↑) 알고리즘입니다.

![Big-Oh complexity chart](https://media.vlpt.us/images/raram2/post/7c0a3c68-c792-44a3-8173-b6ba81145a85/BigO%20notation.png)
이미지 출처: [velog.io](https://velog.io/@raram2/big-o-notation-and-time-complexity)

### 실용적으로 구해보기

알고리즘의 함수식을 구한 후 최고차항 함수식 g(n)을 추출하여 빅-오로 표기하는 것이 정석적인 방법이나,
실용적으로는 **알고리즘 내에 나타난 루프의 반복 횟수를 조사**하여 시간 복잡도를 취합니다.

설명하자면 n이 무한대로 증가함에 따라 가장 영향을 받는 부분이 반복문이기 때문에 위와 같이 합니다.
알고리즘의 함수식에서 반복 상황이 중첩적으로 가장 많은 루프를 최고차항으로 판단합니다.
그 외 최고차항에 붙은 상수는 반복문 내 존재하는 단순 연산들의 개수를,
낮은 차수들은 중첩 반복이 더 적은 또다른 반복문을,
기타 상수는 함수 내 추가적인 연산만을 의미하기 때문에 점근 상황에서는 무시 가능합니다.

### 순환 알고리즘의 성능

순환 알고리즘의 시간 복잡도는 일반적인 방법으로 알아내기 어렵습니다.
따라서 각 순환 알고리즘에 따른 **점화식**을 활용합니다.
대표적인 순환 알고리즘인 재귀식을 활용하는 이진 탐색의 점화식은 다음과 같습니다.

- 재귀(recursion)
    - T(n) = T(n/2) + O(1), T(1) = c1

매번 점화식을 풀기보다는 아래 기본 점화식과 폐쇄형을 미리 숙지해 둡시다.

![recurrence relation](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdwE1HE%2FbtqCB8Oqd1I%2Fis2pl7hQcgIk9BdY3XMN5k%2Fimg.png)
이미지 출처: [atoz-develop.tistory.com](https://atoz-develop.tistory.com/entry/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%98-%EC%84%A4%EA%B3%84%EC%99%80-%EB%B6%84%EC%84%9D-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84%EC%99%80-%EC%A0%90%EA%B7%BC%EC%84%B1%EB%8A%A5)

<br>
## 3. 분할정복 알고리즘 1

<br>
## 4. 분할정복 알고리즘 2
