---
title:  "[KAKAO2020][01] 문자열 다루기"
created:   2020-09-02 22:38:25 +0900
updated:   2020-09-06 20:42:14 +0900
author: namu
categories: algorithm
permalink: "/algorithm/:year/:month/:day/:title"
image: https://tech.kakao.com/assets/kakaoTech.jpg
image-view: true
image-author: tech.kakao.com
image-source: https://tech.kakao.com/blog/
---

<br>
## 들어가며

[**_2020 신입 개발자 블라인드 1차_**](https://tech.kakao.com/2019/10/02/kakao-blind-recruitment-2020-round1/)
1번 문제의 해설이다.<br>
정답률은 **25.9%** 이며 문자열 다루는 능력에 대해 테스트하는 비교적 쉬운 난이도이다(<del>라고 한다ㅠ</del>).

<br>
## Question

데이터 처리 전문가가 되고 싶은 “어피치”는 문자열을 압축하는 방법에 대해 공부를 하고 있습니다. 최근에 대량의 데이터 처리를 위한 간단한 비손실 압축 방법에 대해 공부를 하고 있는데, 문자열에서 같은 값이 연속해서 나타나는 것을 그 문자의 개수와 반복되는 값으로 표현하여 더 짧은 문자열로 줄여서 표현하는 알고리즘을 공부하고 있습니다. 간단한 예로 “aabbaccc”의 경우 “2a2ba3c”(문자가 반복되지 않아 한번만 나타난 경우 1은 생략함)와 같이 표현할 수 있는데, 이러한 방식은 반복되는 문자가 적은 경우 압축률이 낮다는 단점이 있습니다. 예를 들면, “abcabcdede”와 같은 문자열은 전혀 압축되지 않습니다. “어피치”는 이러한 단점을 해결하기 위해 문자열을 1개 이상의 단위로 잘라서 압축하여 더 짧은 문자열로 표현할 수 있는지 방법을 찾아보려고 합니다.

예를 들어, “ababcdcdababcdcd”의 경우 문자를 1개 단위로 자르면 전혀 압축되지 않지만, 2개 단위로 잘라서 압축한다면 “2ab2cd2ab2cd”로 표현할 수 있습니다. 다른 방법으로 8개 단위로 잘라서 압축한다면 “2ababcdcd”로 표현할 수 있으며, 이때가 가장 짧게 압축하여 표현할 수 있는 방법입니다.

다른 예로, “abcabcdede”와 같은 경우, 문자를 2개 단위로 잘라서 압축하면 “abcabc2de”가 되지만, 3개 단위로 자른다면 “2abcdede”가 되어 3개 단위가 가장 짧은 압축 방법이 됩니다. 이때 3개 단위로 자르고 마지막에 남는 문자열은 그대로 붙여주면 됩니다.

압축할 문자열 s가 매개변수로 주어질 때, 위에 설명한 방법으로 1개 이상 단위로 문자열을 잘라 압축하여 표현한 문자열 중 가장 짧은 것의 길이를 return 하도록 solution 함수를 완성해주세요.

* 제한사항
    - s의 길이는 1 이상 1,000 이하입니다.
    - s는 알파벳 소문자로만 이루어져 있습니다.

* 입출력 예

    | s	| result |
    |:--------|:----|
    | ```"aabbaccc"``` -> ```"2a2ba3c"``` | 7 |
    | ```"ababcdcdababcdcd"``` -> ```"2ababcdcd"``` | 9 |
    | ```"abcabcdede"``` -> ```"2abcdede"``` | 8 |
    | ```"abcabcabcabcdededededede"``` -> ```"2abcabc2dedede"``` | 14 |
    | ```"xababcdcdababcdcd"``` -> ```"xababcdcdababcdcd"``` | 17 |

* 입출력 예에 대한 설명
    1. 입출력 예 #1 문자열을 1개 단위로 잘라 압축했을 때 가장 짧습니다.
    2. 입출력 예 #2 문자열을 8개 단위로 잘라 압축했을 때 가장 짧습니다.
    3. 입출력 예 #3 문자열을 3개 단위로 잘라 압축했을 때 가장 짧습니다.
    4. 입출력 예 #4 문자열을 2개 단위로 자르면 “abcabcabcabc6de” 가 됩니다. 문자열을 3개 단위로 자르면 “4abcdededededede” 가 됩니다. 문자열을 4개 단위로 자르면 “abcabcabcabc3dede” 가 됩니다. 문자열을 6개 단위로 자를 경우 “2abcabc2dedede”가 되며, 이때의 길이가 14로 가장 짧습니다.
    5. 입출력 예 #5 문자열은 제일 앞부터 정해진 길이만큼 잘라야 합니다. 따라서 주어진 문자열을 x / ababcdcd / ababcdcd 로 자르는 것은 불가능 합니다. 이 경우 어떻게 문자열을 잘라도 압축되지 않으므로 가장 짧은 길이는 17이 됩니다.

<br>
## Answer
일단 파이썬으로 풀어보았다.

1. 문자열의 제일 앞부터 순차적으로 단위를 증가시키면서 분해 > 분해 최대단위는 문자열 길이의 절반 혹은 /2 의 내림수.
2. 각 분해 단위 결과값의 길이를 저장, 가장 짧은 경우를 반환한다.
3. 제한사항을 지킬 것.

```python
# division of string


def main(s: str) -> int:
    if s is None:
        raise TypeError(f'Please input specific string.')
    elif not isinstance(s, str):
        raise TypeError(f'"{s}" is not a string.')
    elif len(s) < 1 or len(s) > 1000:  # [제한사항1] s의 길이는 1 이상 1,000 이하입니다.
        raise ValueError(f'String length is out of range.(1 to 1000)')
    s = s.lower()  # [제한사항2] s는 알파벳 소문자로만 이루어져 있습니다.

    string_length = len(s)  # shortest string length
    count = 1  # division count unit
    while count <= len(s) / 2:
        # divide by count -> 1, 2, ..., len(s) // 2
        div_list = [s[idx:idx+count] for idx in range(0, len(s), count)]

        result_string = ''
        unit = ''
        unit_count = 0
        for idx, div in enumerate(div_list):
            if unit == div:
                unit_count += 1
            else:
                result_string += f'{unit_count > 1 and unit_count or ""}{unit}'
                unit = div
                unit_count = 1

            if idx + 1 == len(div_list):
                result_string += f'{unit_count > 1 and unit_count or ""}{unit}'

        print(f'[divide by {count}] {s} -> {result_string} / {len(result_string)}')
        if len(result_string) < string_length:
            string_length = len(result_string)
        count += 1
    return string_length


if __name__ == '__main__':
    print(main('aabbaccc'))  # '2a2ba3c', 7
    print(main('ababcdcdababcdcd'))  # '2ababcdcd', 9
    print(main('abcabcdede'))  # '2abcdede', 8
    print(main('abcabcabcabcdededededede'))  # '2abcabc2dedede', 14
    print(main('xababcdcdababcdcd'))  # 'xababcdcdababcdcd', 17
```

<br>
## 출제 의도

- 문자열을 다룰 수 있고, 아래 예시와 같이 문자열과 관련된 다양한 작업을 할 수 있는지 파악
    - 문자열 자르기
    - 부분 문자열 얻기
    - 문자열 비교하기
    - 문자열 길이 얻기

<br>
## 문제 풀이

첫 번째로 배치된, 가장 쉬운 문제입니다. 문자열 길이가 최대 1,000으로 제한이 크지 않기 때문에,
가능한 모든 방법을 탐색하면 됩니다. 문자열 길이가 N일 때, 길이가 N/2 보다 크게 잘랐을 때는 길이가 줄지 않습니다.
따라서 1 ~ N/2 길이로 자르는 방법을 모두 탐색한 후 그중 가장 짧은 방법을 선택하면 됩니다.

<br>
## 후기

(성능 신경x)가능한 모든 방법을 탐색하면 된다는 점에서 그리디 유형 문제라고 판단된다.<br>
일단 나는 제시된 문제 풀이 아이디어를 잘 캐치했다. 문자열을 다룰 수 있는지에 대한 부분과,
문자열 길이 N에 대해 그 절반 길이 이하까지만 divide 하면 된다는 아이디어를 캐치함.

풀이상 핵심은,
1. N//2 단위까지 문자열 분할하여 리스트로 저장
2. 리스트 저장 시 comprehension 활용여부 -> ```[s[idx:idx+count] for idx in range(0, len(s), count)]```
3. 연속된 문자열단위마다 counting 하기, 문자열 비교, 길이 도출 등등..

이정도?
