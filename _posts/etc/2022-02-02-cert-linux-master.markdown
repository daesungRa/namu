---
title:  "[자격증] 리눅스 마스터 1급 준비하기"
created:   2022-02-02 18:08:00 +0900
updated:   2022-02-02 18:08:00 +0900
author: namu
categories: etc
permalink: "/etc/:year/:month/:day/:title"
image: https://media.vlpt.us/images/may_soouu/post/11a98732-df94-4e66-94d4-033634093313/linux.png
image-view: true
image-author: 개벨로그
image-source: https://velog.io/@may_soouu/%EB%A6%AC%EB%88%85%EC%8A%A4-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0
---

<br>
## 시험 안내

**리눅스 마스터**는 리눅스 기반의 Desktop 활용 및 Server 운영 능력, 리눅스 시스템의 설계 개발 및 관리 능력,
리눅스 기반의 네트워크 및 서버 구축/운영 능력을 검정하는 자격시험입니다.

그 중 1급 시험의 목적은 다음과 같습니다.

- **1급**
    - 지식: 고도의 리눅스 활용능력에 대한 이해도 평가
    - 기능: 리눅스를 안전하고 효율적으로 운영하기 위한 실무 기능 평가

이 시험은 **1차시**에서
**(1) 리눅스 실무의 이해(20%)**, **(2) 리눅스 시스템 관리(40%)**, **(3) 네트워크 및 서비스의 활용(40%)** 비중의 사지선다 필기 100문항,
**2차시**에서 **단답 및 서술식 필기 10문항**, **실기(60%) 5~7문항**으로 구성됩니다.

이번 글은 해당 시험을 너무 깊게 파기보다는 전체적인 이론의 맥락을 짚어보거나 몰랐던 부분을 정리하는 수준에서 작성하고자 합니다.
자격증 시험의 특성상, 이론보다는 기출문제를 통해 공부하는 것이 더 효율적이기 때문입니다.

<br><br>

---

### 목차

1. [리눅스 실무의 이해](#1-리눅스-실무의-이해)
2. [리눅스 시스템 관리](#2-리눅스-시스템-관리)
3. [네트워크 및 서비스의 활용](#3-네트워크-및-서비스의-활용)
4. [기출 및 부록 정리](#4-기출-및-부록-정리)

### 참조

- <a href="https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=62844304" target="_blank">
리눅스 마스터 1급 정복하기 (2018, 북스홀릭)</a>

---

<br><br>
## 1. 리눅스 실무의 이해

### 1-1. 리눅스의 개요

### 운영체제의 개요

**운영체제**는 **컴퓨터 하드웨어와 컴퓨터 사용자 간의 매개체 역할을 하는 시스템 소프트웨어**입니다.

- 좁은 의미: 하드웨어와 응용 프로그램 간의 다리 역할하는 커널(Kernel)
- 넓은 의미: 커널 포함 미들웨어, 응용 프로그램 실행 환경과 사용자 인터페이스 프레임워크 모두 포괄

- **운영체제의 주목적**: 컴퓨터 시스템을 편리하게 이용하고, CPU, 주기억장치, 입출력장치 등의 컴퓨터 하드웨어를 효율적으로 관리하는 데 있음

초기 운영체제는 사용자 편의성을 고려하지 않았으나(효율적 자원 관리에 치중), 대중화가 진행되며 편리함과 친근함의 형태로 변화되었습니다.
이러한 것이 GUI 기반의 윈도우 OS 입니다.

GUI 기반 윈도우 OS 에서는 명령어 기반이 아닌 아이콘 이미지 클릭 방식을 지원합니다.

하지만 현재는 **유휴 자원의 효율적 활용**을 위해 가상화 기술을 OS 에서 기본적으로 내장하거나 커널 단에서 지원하고 있습니다.

또한 스마트폰이나 태블릿 전용 모바일 운영체제, 웹 브라우저 전용 OS 도 탄생되었습니다.

- **운영체제의 주요 역할**
    - 컴퓨터의 하드웨어 제어
    - 작업의 순서를 정하며, 입출력 연산을 제어
    - 프로그램의 실행 제어, 데이터와 파일의 저장을 관리
    - 사용자들 간의 하드웨어 자원 공유 제공
    - 시스템 자원을 스케줄링하여 효율적으로 활용
    - 입출력을 쉽게 하는 기능 제공
    - 응용 프로그램의 작성과 실행을 편리하게 함
    - 오류의 발생을 막고 복구를 지원
    - 데이터의 조직화, 네트워크 통신 처리 기능 수행
    - 편리한 사용자 인터페이스 제공

- **최근 운영체제의 주요 특징**
    - 다중 사용자 시스템(Multi-User System)
    - 다중 작업 시스템(Multi-Tasking System)
    - 강력한 네트워크 지원
    - 편리한 사용자 인터페이스 지원
    - 계층적 파일 시스템 운영
    - 가상 메모리 지원
    - 고성능의 프로세서에 최적화
    - 개방형 운영체제화
    - 뛰어난 이식성 지원
    - 가상화 기술 지원

- **운영체제의 역사**
    - 40년대: 초기전자식 디지털 컴퓨터
        - 운영체제가 없음
        - 단순한 기계적인 스위치에 의존
    - 50년대: 단순순차처리
        - 한 번에 오직 하나의 작업만 수행
        - 단일 흐름 일괄 처리
    - 60년대: 다중프로그래밍
        - 멀티프로그래밍, 멀티프로세싱 개념 대두
        - 시분할 처리 개념 대두
        - 데이터 통신 지원
    - 70년대: 다중 모드 시분할
        - 일괄처리, 시분할 및 실시간처리의 보편화
        - 범용 시스템 개념 도입
    - 80년대: 분산네트워크
        - 각종 응용 프로그램 개발
        - 데이터베이스 활용 확대
        - 네트워크 기반으로 한 서버/클라이언트 모델 확대
        - 운영체제 기능들이 하드웨어에 포함된 펌웨어(Firmware) 개념 대두
    - 90년대: 병렬계산과 분산계산
        - 중앙집중식이 아닌 분산으로 발전
        - PC용과 서버용 운영체제의 보편화
    - 2000년대 ~ 현재: 모바일 및 임베디드
        - 네트워크 기반의 분산 및 병렬 운영체제의 보편화
        - 스마트폰, 태블릿 등의 모바일 장치와 가전제품을 위한 모바일 및 임베디드 운영체제의 보편화
        - 다양한 기능, 확장성과 호환성 극대화
        - 다양한 통신망의 확대와 개방형 시스템 발달
        
다음은 리눅스의 특징입니다.

- **리눅스의 특징**
    - 1) 다중 사용자 및 다중 처리 시스템(Multi-User and Multi-Tasking)
    - 2) 완전히 공개된 시스템
        - 커널 및 대부분의 응용 프로그램 소스가 공개됨
    - 3) 뛰어난 네트워크 환경
        - 이더넷(Ethernet), SLIP, PPP, ATM 등의 환경
        - TCP/IP, IPX, AppleTalk 등 프로토콜 지원
    - 4) 다양한 파일 시스템 지원
        - 프로그램과 자료를 저장하기 위해 리눅스 고유 파일 시스템인 ext2, ext3, ext4 등 사용
        - 고유 파일 시스템뿐 아니라 다른 파일 시스템도 지원 > FAT, FAT32, NTFS, ISO 9660, HPFS, SCO 제닉스 등
        - 시스템 다운 시 즉시 복구할 수 있는 저널링 파일 시스템 지원 > ReiserFS, XFS, JFS 등
        - 네트워크 파일 시스템 지원 > SMB, CIFS, NFS, NCPFS 등
    - 5) 뛰어난 이식성
        - 약간의 어셈블리과 대부분의 C언어
    - 6) 유연성과 확장성
        - 유닉스 표준인 POSIX를 준수
        - 공개용 유닉스 프로그램들은 원시코드 접근이 용이하고 다른 시스템에 이식 및 자유로운 배포 가능
    - 7) 뛰어난 안정성과 보안성
        - 공개된 리눅스 커널은 폐쇄된 Windows 에 비해 보안상의 취약점 노출 가능성은 높지만
        - 수많은 전문가들에 의해 빠르게 오류 수정 및 보안 패치가 발표되고 있음
    - 8) 우수한 가격대 성능비
        - PC급 서버에서도 엔터프라이즈급의 성능 발휘
    - 9) 다양한 응용 프로그램의 제공
        - 커널을 비롯, 셸과 기본 명령어, X Window 시스템(Xorg, KDE, GNOME 등의 GUI), vi 등의 편집기(emacs), 웹, 메일, FTP 등
        - 개발 도구 지원(C, C++, Java, Python), 보안 도구(nmap, tcpdump), 게임 등
    - 10) 다양한 배포판의 존재
        - 서버, 개발용, PC용 등 다양한 목적의 배포판
        - RedHat, Debian, Ubuntu, SUSE, 한컴리눅스, SULinux 등
        - 상용 및 무료 배포판

- **리눅스의 단점**
    - 1) 기술지원의 부족
        - 대부분 비상업적 제품들이라 전세계 개발자들이 일일히 기술지원이 불가
    - 2) 특정 하드웨어에 대한 지원 부족
    - 3) 사용자의 숙련된 기술 요구됨
        - 아직 중요한 설정은 명령어를 입력하거나 관련 환경 설정 파일을 편집기를 사용해 수정해야 함

- **리눅스의 기술적인 특징**
    - 1) 계층적인 파일 구조
        - /(root) 기준으로 하위로 가지를 뻗어나가는 트리 구조(usr, var, bin 등)
    - 2) 장치의 파일화
        - 하드디스크, 키보드, 프린터, 화면출력장치 등의 디바이스까지도 모두 파일화하여 사용
        - 해당하는 장치 (실행 혹은 설정) 파일에 명령을 내리는 방식
    - 3) **가상메모리 사용**
        - Virtual Memory 란 하드디스크의 일부를 메모리처럼 사용하는 것을 말함
        - 이곳에는 임시 데이터가 저장되고, RAM 은 작업공간으로 사용
        - RAM 부족 시 큰 프로그램은 실행할 수 없는데, 이를 극복하는 데 가상메모리가 사용됨
        - 이러한 영역을 **스왑(SWAP)** 이라고 함
    - 4) 동적 라이브러리 지원
        - 프로그램 특정 기능을 하는 루틴들을 모아 놓은 것을 라이브러리라 함
        - 개발 시 라이브러리 중 필요한 루틴들을 받아서 링크(Link) 시킴
        - 컴파일 시 프로그램에 들어가는 정적 라이브러리에 비해, 동적 공유 라이브러리는 실행 파일에 들어가지 않고 프로그램 실행 시
        가져다 사용하므로 메모리 효율성이 아주 높음
    - 5) 가상 콘솔
        - Virtual Console 은 하나의 모니터를 장착한 시스템에 여러 개의 가상 화면을 제공
        - 기본 6개의 가상 콘솔 제공 > CTRL + ALT + F1~F6
    - 6) 파이프(Pipe, '|')
        - 프로세스의 통신을 위해 도입
        - 어떤 프로세스의 표준 출력이 다른 프로세스의 표준 입력으로 쓰이게 함
    - 7) 리디렉션(Redirection)
        - 어떤 프로세스의 입/출력을 표준 입출력이 아닌 다른 입출력으로 변경할 때 사용됨
        - 출력 결과를 파일로 저장하거나 파일의 내용을 프로세스의 입력으로 사용

> **스와핑(Swapping)**
> - 메모리에 프로그램들이 많이 올라와 공간이 꽉 찼다고 하더라도 가상메모리를 설정하면 추가로 새로운 프로그램을 실행시킬 수 있게 됩니다.
> 이것은 메모리에 올라와 있지만 사용하지 않고 있는 프로그램을 하드디스크에 설정된 가상메모리 공간으로 보내고 그 빈 공간에 새로운 프로그램을
> 로딩하기 때문입니다. 또한 가상메모리에 있는 내용을 사용하려면 다시 메모리로 올리고, 그 대신에 메모리에 있던 다른 내용이 하드디스크에 저장됩니다.
> 이처럼 메모리와 하드디스크 사이의 데이터 교환을 스와핑이라고 합니다.
>
> **스왑의 확인**
> - 설치 후 스왑 용량의 확인은 메모리 확인 명령어린 free 를 사용합니다. 기본 블록 단위로 출력되므로 -m 옵션을 사용하면 MB 단위로 확인합니다.
> ```text
> ~$ free -m
>         total   used    free    shared  buffers cached
> Mem:    1006    715     291     0       6       326
> Swap:   2047    0       2047
> ```

다음으로 **운영체제의 종류**에 대해 살펴봅시다.

현재 운영체제는 사용 환경에 따라 크게 **서버, 데스크톱, 모바일 및 임베디드, 기타 분야**로 분류할 수 있습니다.

특히 **모바일 운영체제**인 안드로이드나 iOS는 휴대폰, PDA, 스마트폰, 태블릿 뿐만아니라 스마트 TV, 가전제품,
자동차에 내장되는 IVI(In-Vehicle Infotainment)까지 영역을 확대하고 있어 임베디드 운영체제 영역과의 경계가 모호해지고 있습니다.

**기타 분야**에서 웹 기반 운영체제(Web-based Operation System, 이하 Web OS)로써 구글의 크롬 OS가 등장했습니다.

주요 서버 및 데스크톱 운영체제는 다음과 같습니다.

**1) 유닉스(UNIX)**

유닉스의 특징으로는 **다중 사용자(Multi-User) 및 다중 작업(Multi-Tasking)** 지원, 강력한 네트워크 지원, 뛰어난 이식성 및 확장성,
계층적 파일 구조, 가상 메모리 및 공유 라이브러리 지원 등이 있습니다.

- 1969년 미국 AT&T 사의 벨(Bell) 연구소의 연구원 켄 톰슨(Ken Tompson) 및 데니스 리치(Dennis Ritchie)에 의해 만들어짐
- 이후 AT&T는 무료로 여러 연구소 및 대학교에 OS와 소스를 보급하여 여러 버전의 유닉스 등장
- 대표적으로 **System V 계열**과 **BSD 계열**
    - System V 계열: (주로 상업적) IBM, HP, Sun Microsystem, SGI
    - BSD 계열: (주로 오픈소스) NetBSD, FreeBSD, OpenBSD, SunOS, NextStep, Mac OS X, GNU/Linux

**2) 윈도(Windows)**

- 1975년 빌 게이츠(Bill Gates)와 폴 앨런(Paul Allen)이 설립한 마이크로소프트(Microsoft)
- 1982년 MS-DOS 는 IBM PC 호환기종용으로 출시됨
- 1994년 MS-DOS 6.2 버전까지 출시
- 1995년 본격적인 GUI 기반 운영체제인 Windows 95, 이후 Windows 98, Windows ME
- Windows XP 부터는 MS-DOS 가 사라짐

**3) Mac OS X**

...

- Mac OS X 은 Mac OS 의 열 번째 버전이라는 의미였지만, OS X 가 하나의 상품명으로 자리잡음
- BSD 유닉스 기반으로 만든 '넥스트스텝' 을 확장하여 만든 것으로, 결국 유닉스 기반 운영체제라고 볼 수 있음

**4) 모바일 운영체제**

모바일 운영체제는 기본적으로 데스크톱용 윈도우, 맥, 리눅스와 같은 운영체제와 비슷하나 모바일 장치 및 환경적 특성에 적합하도록 설계되었습니다.

- 배터리 사용 최적화
- PC에 비해 상대적으로 낮은 사양
- 무선 기반 광대역 및 지역 연결 특화
- 다양한 멀티미디어 지원
- 커널, 하드웨어 드라이버, 미들웨어, 응용 프로그램 실행 환경, 사용자 인터페이스 프레임워크 등 제공

모바일 운영체제는 TV나 자동차 영역까지 확대되었습니다.

**5) 리눅스 기반 모바일 운영체제**

리눅스는 BSD 계열의 유닉스 수정본입니다.

- **구글의 안드로이드(Android)**
    - 리눅스 커널 위에서 동작하는 대표적인 운영체제
    - 다양한 C/C++ 라이브러리 포함
    - 자바 언어로 작성된 응용 프로그램 구동 > 달빅(Dalvik) 가상 머신으로 프로그램을 별도의 프로세스로 실행
    - 2005년 구글이 안드로이드사를 인수하면서 대세가 됨
    - 50여만 개의 다양한 애플리케이션을 제공하는 안드로이드 생태계
    - iOS 에 비해 개발 진입장벽이 낮음
    - [단점] 오픈소스로 인한 보안상의 취약점
    - [단점] 다수의 하드웨어로 통일성이 떨어짐, 안정성 확보 어려움
- 바다(Bada) OS, 마에모(Maemo), 모블린(Moblin), 미고(MeeGo), 리모(LiMo), 타이젠(Tizen)

**6) 스마트 TV**

스마트 TV 란 운영체제를 탑재하고 TV 본연의 기능인 실시간 방송 시청뿐만 아니라 인터넷 접속 기능을 기반으로 웹 검색, VOD, 게임, SNS, 앱스토어
등의 기능이 가능한 TV 를 말합니다.

스마트 TV 는 기본적으로 모바일 기기와 동일한 운영체제를 탑재합니다.

애플은 iOS, 구글은 안드로이드, 삼성전자는 바다OS 혹은 타이젠, LG 전자는 자체 넷캐스트 OS(또는 Web OS)

**7) IVI(In-Vehicle Infotainment)**

IVI 는 ICE(In-Car Entertainment) 라고도 하며, 자동차 내에서 다양한 편의 기능과 오락시설을 제공하는 것이 목적입니다.

- MS 의 Windows Embedded Automotive, QNX, GENIVI, 안드로이드, MeeGo/Tizen IVI

**8) 웹 운영체제**

2000년대 초반의 웹 OS(제1세대형) 는
"인터넷 기반의 운영체제로 인터넷 접속이 가능한 곳이라면 언제 어디서나 자신의 데스크톱을 사용하는 것과 같은 환경을 제공하는 서비스"를 의미했습니다.

따라서 기존의 윈도우나 리눅스 등에서 웹 브라우저를 호출하여 인터넷 접속으로 개인 데스크톱을 활성화합니다.
이곳에 로그인 후 생성한 파일이나 애플리케이션은 유저의 하드웨어가 아닌 웹 서버에 저장됩니다.

최근의 웹 OS(제2세대형) 는 "웹 브라우저를 기반으로 동작하는 가상의 운영체제"의 개념으로 진화했습니다.
사용자는 별도 OS 설치과정 없이 경량화된 최소 크기의 커널 위에서 웹 브라우저를 통해 서비스 제공자 웹 사이트에 접속하여 다양한 서비스를 이용합니다.

최근에는 클라우드 컴퓨팅 서비스와 결합하여 더 강력해졌습니다.
대표적으로 구글의 크롬 OS가 있습니다.

- 어디서나 동일한 작업 환경
- 데이터는 사용자의 하드디스크가 아니라 원격지나 클라우드에 저장
- 네트워크가 지원되는 환경이라면 어디서든지 빠르게 사용
- 크롬 웹 스토어를 통해 사용자가 일부 프로그램을 설치하도록 지원
- 높은 보안성 제공

### 리눅스 기초

- **리눅스의 철학**
    - **상용 유닉스**
        - 기업의 엄격한 통제 및 계획 아래서 진행, 개발자가 임의로 기능 추가 수정할 수 없음
    - **리눅스**
        - 엄격한 정책 하에 이루어지지 않고, 인터넷 연결된 전 세계 개발자 그룹들의 기여를 통해 발전하므로
        - 리눅스 시스템을 통합적으로 책임지고 개발하는 어떠한 조직이나 기업체가 존재하지 않음
        - 리눅스 공동체는 다양한 메일링 리스트, 유즈넷 뉴스그룹 등을 통해 소통
        - 리눅스 커널은 최초 개발자인 리누스 토발즈 주도하에 발전됨
    - **GNU**
        - 'GNU is Not Unix' 의 재귀적 용법
        - 리처드 스톨먼을 주축으로 자유로운 소프트웨어를 희망하던 공동체들이 가장 먼저 운영체제인 유닉스를 모태로 개발을 시작하면서 탄생

### 1-2. 리눅스 시스템의 이해

### 리눅스와 하드웨어

### 리눅스의 구조

### X 윈도

### 셸(Shell)

### 프로세스

### 1-3. 네트워크의 이해

### 네트워크의 기초

### 네트워크 설정

### 기출 예상문제

<br><br>
## 2. 리눅스 시스템 관리


<br><br>
## 3. 네트워크 및 서비스의 활용


<br><br>
## 4. 기출 및 부록 정리
