---
title: "AWS 자격증 취득하기: SA - Associate"
created: 2023-01-28 18:00:00 +0900
updated: 2023-01-28 22:00:00 +0900
author: namu
categories: cloud
permalink: "/cloud/:year/:month/:day/:title"
image: https://d2908q01vomqb2.cloudfront.net/9109c85a45b703f87f1413a405549a2cea9ab556/2021/04/14/social-image-ML-1243x630.png
image-view: true
image-author: amazon.com
image-source: https://aws.amazon.com/ko/blogs/training-and-certification/learn-how-to-operationalize-ml-models-with-new-aws-course/
---

---

### 목차

- [개념 정리](#개념-정리)
- [오답 노트](#오답-노트)

### 시리즈

- <a href="{{ site.github.url }}/cloud/2021/09/18/aws-terminologies" target="_blank">
[01][AWS 퍼블릭클라우드 실습] 용어 정리</a>
- <a href="{{ site.github.url }}/cloud/2021/09/18/build-cloud-infra-with-aws01" target="_blank">
[02][AWS 퍼블릭클라우드 실습] VPC 구축</a>
- <a href="{{ site.github.url }}/cloud/2021/10/17/build-cloud-infra-with-aws02" target="_blank">
[03][AWS 퍼블릭클라우드 실습] EC2 생성</a>

### 참조

- <a href="https://aws.amazon.com/ko/training/learn-about/architect/?la=sec&sec=role" target="_blank">
AWS: training page of SA(Solutions Architect)</a>
- <a href="https://www.inflearn.com/course/aws-%EC%9E%90%EA%B2%A9%EC%A6%9D-%EC%96%B4%EC%86%8C%EC%8B%9C%EC%97%90%EC%9D%B4%ED%8A%B8" target="_blank">
인프런 강의(코드바나나님): AWS Certified Solutions Architect - Associate 자격증 준비하기</a>

---

<br>
## 들어가며

신년을 맞아 **<a href="https://aws.amazon.com/ko/certification/benefits/" target="_blank">AWS 자격증 배지</a>**를 
달아보자는 목표를 세웠습니다.

그 중 퍼블릭 클라우드 인프라 전반에 대한 기본적인 이해를 요구하는<br>
**<a href="https://aws.amazon.com/ko/certification/certified-solutions-architect-associate/?ch=sec&sec=rmg&d=1" target="_blank">
Solutions Architect: Associate</a>** 를 취득하기로 정했습니다.

사실 작년동안 회사 내 여러 프로젝트를 진행하며 AWS 퍼블릭 클라우드 인프라를 계속 다뤄왔습니다.

이번 시험을 준비하며 알고있던 개념들을 체계적으로 정리하고, 몰랐던 세부내용까지 학습할 예정입니다.
본 글에서는 전부 다 나열하지는 않고 부분적으로 알았거나 새로 배운 서비스 위주로 기술하겠습니다.

> 인프런 **<a href="https://www.inflearn.com/course/aws-%EC%9E%90%EA%B2%A9%EC%A6%9D-%EC%96%B4%EC%86%8C%EC%8B%9C%EC%97%90%EC%9D%B4%ED%8A%B8" target="_blank">
AWS Certified Solutions Architect - Associate 자격증 준비하기</a>** 강의를 참조했습니다.

<br>
## 개념 정리

### IAM policy

IAM 정책은 **Json 포맷**으로 이루어집니다.

정책 내에 **Statement** 는 여러 개 있을 수 있고, 구문이 나열된 순서대로 축적되며 적용됩니다.<br>
statement 간 충돌이 있을 경우 나중에 배치된 구문이 적용됩니다.

커스텀 정책은 **IAM 사용자**, **IAM 그룹** 혹은 **IAM 역할(role)**에 각각 지정할 수 있습니다.<br>
AWS 에는 사전에 정의된 다양한 정책이 존재하므로, 검색을 통해 적절히 활용할 수 있습니다.

**<a href="https://awspolicygen.s3.amazonaws.com/policygen.html" target="_blank">AWS Policy Generator</a>**
를 활용해 보다 손쉽게 정책을 생성할 수 있습니다.

<br>
### IAM role

**역할(role)**은 **IAM 사용자**, **IAM 그룹**과 더불어 정책을 구성하는 단위로 사용됩니다.

역할은 **AWS 리소스**에서 사용하는 자격증명이며,
보통 **AWS EC2 리소스에 특정 정책 및 권한을 적용**할 때 사용됩니다.

<br>
### 권한 경계(Permissions Boundary)

**권한 경계**는 IAM 사용자 또는 역할에 최대 권한을 제한하는 기능입니다.<br>
권한 경계가 지정된 사용자는 넓은 범주의 정책 적용을 받더라도 **지정된 권한 경계를 초과하는 권한은 가질 수 없습니다.**

예를 들어 **'admin'** 그룹에 속한 사용자들이 **AmazonEC2FullAccess** 권한을 가진다고 할 때,
**'temp_admin'** 계정에 한해 권한 경계를 **AmazonEC2ReadOnlyAccess** 로 지정해두면
**'temp_admin' 계정은 'admin' 그룹에 속했음에도 EC2 리소스에 대해 읽기 권한**만 가집니다.

<br>
### 신뢰 정책(Trust Policy)

**신뢰 정책**은 **IAM 역할에서 AWS 계정 간 액세스 권한을 위임할 때** 사용됩니다.

예를 들어 개발자들이 테스트 수행을 위해 프로젝트의 프로덕션 권한을 얻을 때 사용할 수 있습니다.<br>
(본래는 프로덕션 권한이 없지만 프로덕션 계정의 역할에서 지정된 신뢰 관계를 통해 임시로 권한을 획득)

<br>
### EC2 관련

(1) **인스턴스 구매 옵션**은 다음과 같습니다.

- **온디맨드**: 초당 사용량 청구
- **스팟 인스턴스**: 경매 방식, 가장 저렴할 수 있으나 shutdown 의 위험 존재
- **예약 인스턴스**: 1년 ~ 3년, 인스턴스 유형 및 리전 포함 일관된 인스턴스 구성, 온디맨드에 비해 최대 75% 저렴
- **savings plan**: 1년 ~ 3년 기간 동안 시간당 USD 로 일관된 사용량 약정, 초과분은 온디맨드 청구, 온디맨드에 비해 최대 66~72% 저렴
- **전용 호스트/전용 인스턴스**: 단일 테넌트 하드웨어 서버 할당. CPU 소켓, 코어가 지정되면 전용 호스트, 아니면 전용 인스턴스

(2) **ENI(Elastic Network Interface)** 는 인스턴스에 부착되어 네트워크 카드(랜카드) 역할을 합니다.

- **네트워크 인터페이스(ENI)**: 일종의 네트워크 카드로 IP, MAC 주소가 할당되며 보안 그룹에 연계되어 네트워크 트래픽 제어
    - 인스턴스에는 여러 ENI 가 부착될 수 있음
    - 이 말은 곧 여러 IP 주소를 부여할 수 있다는 의미!

(3) **EC2 배치 그룹(Placement Groups)**이란 가용영역 내 하드웨어 서버랙에서
EC2 인스턴스들을 다양한 형태로 가깝게 배치하는 것을 의미합니다.
배치 전략에 따라 서버랙 전반에 분산되도록 하거나 논리적 파티션 단위로 분할하거나 단일 서버랙에 국한되게 구성할 수 있습니다.

- **클러스터 배치그룹**: 고성능 네트워크 연결로 이루어진 인스턴스 묶음
    - 물리적으로 가깝게! 따라서 네트워크 지연시간이 매우 짧음! 고성능 컴퓨팅(HPC)에 활용
- **파티션 배치그룹**: 인스턴스 그룹을 하드웨어를 공유하지 않는 파티션 단위로 분할
    - 논리적 파티션 그룹! 서로 다른 서버랙의 하드웨어를 엮어서 파티션 구성
    - 따라서 파티션은 하드웨어를 공유하지 않으므로 하나의 하드웨어에 장애가 발생해도 다른 파티션은 영향을 받지 않음
    - 하둡 등 빅데이터 분산처리 시스템에 사용
- **분산형 배치그룹**: 인스턴스 그룹을 별개의 서버랙 단위로 구성
    - 각 분산 그룹은 서로 다른 서버랙이므로 특정 서버랙에 장애가 발생해도 다른 그룹은 안전함
    - 매우 중요하고 고가용성이 필요한 애플리케이션에 적합

(4) **EC2 라이프 사이클**에서 **최대절전모드**는 (PC의 절전모드와 같음)
    
- **라이프 사이클**: 시작, 재부팅, 중지, 종료, 최대절전모드
- **최대절전모드(Hibernate)**: RAM 에 있는 애플리케이션 상태를 저장 후 중지상태로 전환(노트북 절전모드),
메모리에서 불러오므로 부팅 속도가 빠르고 상태가 보존됨

(5) **타겟 그룹(Target Group)** 생성 후 **속성(Attributes)**값 세팅 시 공통적으로 **등록 취소 지연(Deregistration delay)**
값을 지정합니다.

- **등록 취소 지연(Deregistration delay)**: Auto Scaling 축소 등으로 등록 취소된 인스턴스에 연결된 request 가 있을 경우,
지정한 시간 동안 지연 후에도 연결이 유효하지 않으면 더 이상 해당 인스턴스에 request 를 보내지 않는 기능. 보통 300초로 지정
- **HTTP/HTTPS 프로토콜을 사용하는 ALB 의 속성**의 경우, **느린 시작 기간(Slow start duration)** 설정을 통해 신규 등록된 타겟에
대한 request 를 선형적으로 증가시킬 수 있고,
**Stickiness Session(고정 세션)** 을 설정해 동일 세션인 경우 동일 인스턴스에 고정적으로 클라이언트 요청이 가도록 할 수 있음
- **TCP/UDP/TLS 프로토콜을 사용하는 NLB 의 속성**의 경우, **등록 해제 시 연결 종료(Connection termination on deregistration)**
설정을 통해 등록 취소 지연이 일어나는 동안 해당 타겟에 대한 활성 연결을 NLB 로 하여금 종료하도록 만들 수 있고,
**클라이언트 IP 주소 보존(Preserve client IP addresses)**을 설정하여 모든 트래픽의 클라이언트의 IP 를 타겟에 그대로 전달할 수 있음.
**Stickiness Session(고정 세션)** 설정도 동일하게 가능

(6) **로드 밸런서(ELB, Elastic Load Balancer)**

- **A(Application)LB** 의 경우, **리스너 규칙 조건(IF)값**은,
    - **호스트 헤더 기반**: 지정된 호스트 요청에 대한 타겟 그룹으로 라우팅
    - **Path 기반**: 요청 URL에 따라 라우팅
    - **HTTP 헤더 기반 라우팅**
    - **HTTP request method 기반 라우팅**
    - **Query string 기반**: 쿼리 문자열의 키/값 페어 또는 값을 기반으로 라우팅
    - **Source IP 기반 라우팅**
- **N(Network)LB** 의 경우 네트워크 및 전송계층이므로 **리스너 규칙 조건(IF) 설정 없음**
    - 다만 **고정 IP(EIP) 할당**이 가능함! >> **만약 고정적인 퍼블릭 IP 할당이 필요하다면 NLB 를 고려**해야 함

(7) **Auto Scaling** 은 인스턴스를 자동으로 확장하고 축소하는 기능으로,
사용자가 정의한 조정 정책에 따라 개수가 조절됩니다. 혹은 서버의 로드 수에 따라서 조절도 가능합니다.

- **구성 요소**: 오토 스케일링 그룹, 시작 템플릿(AMI, 인스턴스 유형, 스크립트 등 지정), 조정 옵션(조정 정책)
- **조정 정책**: Auto Scaling 을 실행하기 위한 조건
    - 항상 현재 인스턴스 수준 유지 관리
    - 수동 조정(최대, 최소, 원하는 용량만)
    - 일정을 기반으로 조정(시간 및 날짜 함수)
    - 온디맨드(동적) 기반 조정(수요 변화, 예를 들어 CPU 50%)
        - 대상 추적 조정, 단계 조정, 단순 조정, Amazon SQS 기반 크기 조정
    - 예측 조정 사용(Predictive Scaling) > 머신 러닝을 이용하여 CloudWatch 기록 데이터 기반
- **조정 휴지(Scaling cooldowns)**: 인스턴스 증가 혹은 감소 시 처음에는 CPU 사용량이 늘어나는 등 비정상 상황이 존재할 수 있으므로
조정 휴지 기간을 가짐. 보통 300초며, 이 동안에는 Auto Scaling Group 은 지표값을 측정하지 않음
- **수면 주기 후크**: Lifecycle hook 활용하여 launcing or terminating 되는데, 훅 기간에 필요한 작업을 추가할 수 있음
(ex. 로그나 실행정보를 감사시스템에 메시지(SQS)로 보내는 작업 추가하기)

(8) **EBS(Elastic Block Storage)**는 SSD, HDD 와 같은 하드디스크로 EC2에 부착됩니다.
인스턴스를 시작할 때 함께 생성되는 EBS 는 부트 볼륨으로 시스템 부팅을 위해 사용됩니다.

- EC2 와 EBS 볼륨은 **같은 AZ 에 있어야** 연결 가능
- 유형: **SSD Type**(범용SSDgp2gp3, 프로비저닝된SSDio1io2), **HDD Type**(처리량최적화st1, 콜드sc1)
- IAM 이 설치되는 부트 볼륨은 범용SSD, 프로비저닝된SSD만 지원
- **EBS 다중연결(Multi-Attach)**
    - 하나의 볼륨이 여러 EC2 인스턴스에 연결(최대 16개)
    - Nitro 기반 Linux 인스턴스 유형만 가능(동일 AZ)
    - 프로비저닝된SSD만 지원
- **스냅샷**
    - 백업된 EBS 볼륨 데이터는 **다른 AZ 또는 리전에 복사, 생성 가능**
    - **스냅샷으로부터 커스텀 AMI 이미지를 만들어 새 EC2 인스턴스 생성까지 가능함!**
    - 이 때는 설치할 OS가 설치된 부트 볼륨이어야 함
- 이미 존재하는 EBS 볼륨이 암호화되지 않았다면 스냅샷을 이용하여 암호화된 볼륨으로 재생성 가능

(9) **Instance Store** 는 가상머신인 인스턴스에 물리적으로 부착된 **임시 블록 스토리지**로,
물리적으로 붙어있어 고성능이지만 인스턴스가 종료(혹은 최대절전모드)되면 사라지므로
**빠른 IOPs 성능의 임시저장 스토리지**를 요하는 시스템에 적합합니다.

(10) **EFS(Elastic File System)** 란 리눅스 환경의 EC2 인스턴스에서 연결하기 위한 **네트워크 파일 스토리지**입니다.
이것은 **인바운드 시 NFS 프로토콜 규칙을 적용하는 보안 그룹**을 지정하는 것이 특징입니다.

- **EFS**: 네트워크 파일 스토리지는 온프레미스를 포함한 여러 원격 서버에서 접속할 수 있으므로 **NFS 프로토콜**을 지원함
    - 보안 그룹을 통해 여러 가용영역에 존재하는 수십~수백 대의 EC2 인스턴스 연결 가능
- **스토리지 클래스 분류**
    - **표준 스토리지(Standard)**: 3개의 가용영역에 데이터 저장, 자주 액세스하는 파일 대상
    - **표준 IA(Standard Infrequent Access)**: 3개 가용영역, 자주 액세스하지 않는 파일 대상
    - **One Zone/One Zone IA**: 1개 가용영역에 자주 액세스하거나/자주 액세스하지 않는 파일 대상
    - **수명 주기 관리** 설정을 통해 자주 액세스하지 않는 파일을 다른 스토리지 클래스로 자동으로 이동시키도록 할 수 있음
- **성능 모드**: 스토리지의 I/O, 읽기 쓰기 속도 조정
    - **기본 범용 성능 모드(General Purpose Performance Mode)**: 일반적인 I/O 성능
    - **최대 I/O 성능 모드(Max ~)**: 높은 성능을 요하는 빅데이터 분석 앱 등에서 사용
- **처리량 모드**: 파일 시스템의 처리량(MiB/s) 조정
    - **기본 버스팅 처리량 모드**: 파일 용량이 커짐에 따라 처리량을 자동 확장
    - **프로비저닝된 모드**: 고정 처치량 지정
- **인스턴스 생성 후 EFS 연결하기**
    1. **NFS 전용 보안그룹**을 생성한 후 적절한 옵션으로 **EFS 생성하면서 각 가용영역에 해당 NFS 보안그룹 연결**
    2. **EC2 인스턴스**를 생성하며 **스토리지(볼륨)의 파일 시스템을 EFS** 로 지정
        - 인스턴스 생성하며 이전에 생성한 EFS 를 바로 연결할 수 있지만, **생성 이후에 연결할 수**도 있음
        - 보안그룹을 이전에 생성한 **NFS 보안그룹에서 허용하는 대상**으로 지정
    3. 생성한 EFS 에서 '연결' 을 클릭하여 **DNS를 통한 탑재** 이후 **EFS 탑재 헬퍼 사용** 혹은 **NFS 클라이언트 사용** 부분 확인
        - 인스턴스에서 **amazon-efs-utils** 패키지 설치 후 EFS 파일 시스템을 마운트(mount)
            - 마운트 정보는 앞서 확인한 명령줄 사용!

<br>
### S3 및 기타 스토리지

(1) 오브젝트 스토리지인 **S3(Simple Storage Service)** 는 파일이 아닌 오브젝트 단위로 데이터를 저장합니다.
오브젝트에는 **키, 데이터 및 옵션 메타데이터**가 포함되어 있으며 키값으로 접근이 가능합니다.

- **S3**: 거의 무제한의 저장용량을 제공하며, **버킷**은 오브젝트 저장공간이고 **오브젝트**는 일종의 파일과 같은 객체
    - 버킷은 리전 단위로 생성되며 유일성을 갖춰야 함
    - 개발 오브젝트의 최대 사이즈는 5TB
- **버전 관리**: 동일한 이름의 객체(파일)를 업로드하면 여러 버전으로 저장됨(버전 관리 기능 활성화 필요)
- **암호화**: 데이터 암호화를 위해 **서버 측 암호화(SSE)**와 **클라이언트 측 암호화(CSE)**, **전송 중 암호화(SSL/TLS 이용)**를 사용
- **S3 버킷 정책**: 일반적으로 버킷 정책을 주로 사용하며, 정적 웹사이트 호스팅 시에는 퍼블릭 액세스 허용함
    - **버킷 정책**: JSON 형식의 정책으로, AWS 리소스나 특정 계정에 버킷 액세스 권한을 부여
    - **퍼블릭 액세스 차단(버킷 설정)**: 인터넷망에서 접속하는 퍼블릭 액세스를 차단하도록 할 수 있음. 버킷 기본값!
    - **ACL(액세스 제어 목록)**: AWS 계정에 버킷이나 객체 단위로 읽기/쓰기 권한 부여

(2) **스토리지 클래스**: S3 서비스는 저장하는 데이터의 특성이나 패턴에 따라 **스토리지 클래스**를 결정할 수 있는데,
이에 따라 비용을 적절하게 절감할 수 있습니다.

- **S3 Standard(범용)**: 짧은 지연과 많은 처리량을 제공하므로 일반적인 용도의 다양한 사례에 사용됨
- **S3 Intelligent-Tiering**: 데이터에 대한 액세스 패턴을 알 수 없거나 변화하는 경우 사용됨.
액세스 패턴을 모니터링하여 빈도가 낮으면 더 저렴한 액세스 계층으로 자동으로 이동
    - 계층 이동: **Frequent Access 계층** >> **Infrequent Access 계층** >> **Archive Access
        계층** >> **Deep Archive Access 계층**
- **S3 Standard-IA(Infrequent)**: 빈번하지 않은 액세스용. 하지만 빠른 액세스가 필요한 데이터에 적합. 최소 과금 기간 30일
- **S3 One Zone-IA**: **S3 Standard-IA(Infrequent)**와 유사하지만, 단일 가용영역에만 저장하므로 비용이 상대적으로 저렴.
대신 그만큼 가용성이 떨어짐.(다른 스토리지 클래스는 최소 3개 AZ 에 데이터를 저장함) 최소 과금 기간 30일
- **Glacier Instant Retrieval(아카이브용)**: 저렴한 비용으로 장기 보관하는 백업 용도. 분기에 한번 액세스하는 오래된 아카이브
데이터 용도. 최소 과금 기간 90일
    - 검색 시간: 밀리초 내에 즉시 검색
- **S3 Glacier/Glacier Flexible Retrieval(아카이브용)**: 이것은 일 년에 한번 액세스용으로 검색 시간은 몇 분 내지 몇 시간 소요됨
최소 과금 기간 90일
- **S3 Glacier Deep Archive(아카이브용)**: 가장 저렴하며 일 년에 한번 미만 액세스 및 7~10년 이상 장기 보관용으로
검색 시간은 몇 시간. 최소 과금 기간 180일

(3) **객체 수명 주기 관리(Lifecycle Policy)**: 오브젝트마다 스토리지 클래스를 일일히 지정할 수는 없으므로, 이를 비용효율적으로
관리해주는 수명 주기 관리 기능을 사용할 수 있습니다.

- 버전 관리가 활성화된 경우, 버전별 수명 주기 정책을 적용할 수 있음
    - ex. **S3 Standard >> (30 days) >> S3 Standard-IA >> (60 days) >> Glacier >> (365 days) >> Delete!**
- Amazon S3 Analytics 로 데이터 액세스 패턴을 분석 후 IA 스토리지 클래스로 옮길 시점을 알려줌

(4) S3 에서 **정적 웹사이트를 호스팅**하면 EC2 로 동적 사이트를 호스팅하는 것보다 훨씬 간편하고 저렴하게 운영할 수 있습니다.
이 때는 정적 호스팅을 위한 **인덱스 및 에러 페이지와 기본적인 리소스를 버킷에 업로드**하고, **퍼블릭 액세스 차단을 해제**하도록 합니다.

(5) S3 의 **서버 액세스 로깅(Access Logs)**을 활성화하면 버킷의 모든 활동이 로그파일로 저장되어 감사 목적으로 활용할 수 있습니다.
이 때 **로그파일 저장소를 같은 버킷에 두지 말아야** 합니다.(무한루프의 위험) 따라서 액세스 로그 저장용 버킷을 따로 생성해 두면 좋습니다.

(6) **S3 Replication(복제 규칙)**이란 버킷 간에 객체를 자동으로 복제하는 기능입니다. 이를 위해 원본과 대상 버킷 모두 버전관리가
활성화되어 있어야 합니다.(다른 계정 버킷간에도 가능)

- **교차 리전 복제(CRR, Cross Region Replication)**: 서로 다른 리전의 버킷으로 복사.
    - 예를 들어, 한국의 객체를 미국에서 빠르게 볼 수 있도록 복제 또는 재해복구의 목적
- **동일 리전 복제(SRR, Same Region Replication)**: 동일 리전 복사.
    - 예를 들어, 동일 데이터를 사용하는 프로덕션과 테스트 계정 간의 복제 혹은
    - 법적 준수사항으로 같은 리전 안에 데이터 복사본을 만들어 놓아야 하는 경우

<br>
### 글로벌 전송

<br>
### 데이터베이스

<br>
### 데이터 분석 서비스

<br>
### 애플리케이션 통합

<br>
### 보안 및 자격증명

<br>
### 관리 및 거버넌스

<br>
### 네트워크 관련

(1) **Route53**

(2) **VPC**

(3) **NACL & Security Groups**

<br>
### 인프라 자동화

<br>
### 컴퓨팅 관련

(1) **컨테이너 서비스**

(2) **Serverless**

(3) **Elastic Beanstalk**

(4) **머신러닝**

<br>
### 재해 복구

<br>
## 오답 노트!
